import React, { useState, useEffect } from 'react';
import { db } from '../firebaseConfig';
import { collection, getDocs, query, orderBy } from 'firebase/firestore';
import '../assets/components/ProductSelectionModal.css';
import { FaTimes, FaSearch, FaPlus } from 'react-icons/fa';

function AccessorySelectionModal({ onSelectAccessory, onClose, existingProducts = [] }) {
Â  const [accessories, setAccessories] = useState([]);
Â  const [searchQuery, setSearchQuery] = useState('');
Â  const [loading, setLoading] = useState(true);
Â  const [itemQuantities, setItemQuantities] = useState({});

Â  const ensureValidQuantity = (value) => {
Â  Â  const num = parseInt(value, 10);
Â  Â  return isNaN(num) || num < 1 ? 1 : num;
Â  };

Â  useEffect(() => {
Â  Â  const fetchAccessories = async () => {
Â  Â  Â  try {
Â  Â  Â  Â  setLoading(true);
Â  Â  Â  Â  const q = query(collection(db, 'inventario'), orderBy('nombre', 'asc'));
Â  Â  Â  Â  const querySnapshot = await getDocs(q);

Â  Â  Â  Â  const accessoryList = querySnapshot.docs
Â  Â  Â  Â  Â  .map((doc) => {
Â  Â  Â  Â  Â  Â  const data = doc.data();
Â  Â  Â  Â  Â  Â  
Â  Â  Â  Â  Â  Â  const precioVenta = parseFloat(data.costoVenta) || 0;
Â  Â  Â  Â  Â  Â  const cantidadStock = Number(data.cantidad) || 0;

Â  Â  Â  Â  Â  Â  return {
Â  Â  Â  Â  Â  Â  Â  id: doc.id,
Â  Â  Â  Â  Â  Â  Â  nombre: data.nombre,
Â  Â  Â  Â  Â  Â  Â  cantidad: cantidadStock,
Â  Â  Â  Â  Â  Â  Â  precio: precioVenta, 
Â  Â  Â  Â  Â  Â  Â  unidad: data.unidad || 'unidad',
Â  Â  Â  Â  Â  Â  Â  seccion: data.seccion ? data.seccion.toLowerCase() : '',
Â  Â  Â  Â  Â  Â  };
Â  Â  Â  Â  Â  })
Â  Â  Â  Â  Â  .filter(
Â  Â  Â  Â  Â  Â  // ðŸ”‘ CORRECCIÃ“N CLAVE: Permite productos de "accesorios" Y "restaurante"
Â  Â  Â  Â  Â  Â  (item) => 
                (item.seccion === 'accesorios' || item.seccion === 'restaurante') 
                && item.cantidad > 0 
                && item.precio > 0
Â  Â  Â  Â  Â  );

Â  Â  Â  Â  setAccessories(accessoryList);
Â  Â  Â  } catch (error) {
Â  Â  Â  Â  console.error('Error al obtener accesorios: ', error);
Â  Â  Â  Â  setAccessories([]);
Â  Â  Â  } finally {
Â  Â  Â  Â  setLoading(false);
Â  Â  Â  }
Â  Â  };

Â  Â  fetchAccessories();
Â  }, []); 

Â  const filteredAccessories = accessories.filter(
Â  Â  (acc) =>
Â  Â  Â  acc.nombre.toLowerCase().includes(searchQuery.toLowerCase()) ||
Â  Â  Â  (acc.codigo && acc.codigo.toLowerCase().includes(searchQuery.toLowerCase()))
Â  );

Â  const handleQuantityChange = (id, value) => {
Â  Â  const qty = ensureValidQuantity(value);
Â  Â  setItemQuantities((prev) => ({ ...prev, [id]: qty }));
Â  };

Â  const handleSelect = (accessory) => {
Â  Â  const qty = itemQuantities[accessory.id] || 1;
Â  Â  const finalPrice = parseFloat(accessory.precio) || 0;

Â  Â  if (finalPrice <= 0) {
Â  Â  Â  alert(`ERROR: El accesorio '${accessory.nombre}' no tiene un precio de venta registrado (Bs. 0.00). Por favor, corrÃ­jalo en Inventario.`);
Â  Â  Â  return;
Â  Â  }

Â  Â  if (qty > accessory.cantidad) {
Â  Â  Â  alert(`Stock insuficiente. Solo quedan ${accessory.cantidad} ${accessory.unidad}.`);
Â  Â  Â  return;
Â  Â  }

Â  Â  onSelectAccessory({ 
        ...accessory, 
        precio: finalPrice,
        cantidad: qty 
    });

Â  Â  setSearchQuery('');
Â  Â  setItemQuantities((prev) => {
Â  Â  Â  const newState = { ...prev };
Â  Â  Â  delete newState[accessory.id];
Â  Â  Â  return newState;
Â  Â  });
Â  };

Â  return (
Â  Â  <div className="modal-overlay">
Â  Â  Â  <div className="modal-content">
Â  Â  Â  Â  <button onClick={onClose} className="close-modal-btn">
Â  Â  Â  Â  Â  <FaTimes />
Â  Â  Â  Â  </button>
Â  Â  Â  Â  <h3>AÃ±adir Accesorio</h3>

Â  Â  Â  Â  <div className="input-with-icon">
Â  Â  Â  Â  Â  <FaSearch />
Â  Â  Â  Â  Â  <input
Â  Â  Â  Â  Â  Â  type="text"
Â  Â  Â  Â  Â  Â  className="search-input"
Â  Â  Â  Â  Â  Â  placeholder="Buscar accesorio..."
Â  Â  Â  Â  Â  Â  value={searchQuery}
Â  Â  Â  Â  Â  Â  onChange={(e) => setSearchQuery(e.target.value)}
Â  Â  Â  Â  Â  />
Â  Â  Â  Â  </div>

Â  Â  Â  Â  {loading ? (
Â  Â  Â  Â  Â  <p>Cargando accesorios...</p>
Â  Â  Â  Â  ) : (
Â  Â  Â  Â  Â  <ul className="product-list">
Â  Â  Â  Â  Â  Â  {filteredAccessories.length === 0 ? (
Â  Â  Â  Â  Â  Â  Â  <p>No se encontraron accesorios disponibles (o no tienen precio de venta).</p>
Â  Â  Â  Â  Â  Â  ) : (
Â  Â  Â  Â  Â  Â  Â  filteredAccessories.map((acc) => {
Â  Â  Â  Â  Â  Â  Â  Â  const currentQty = itemQuantities[acc.id] || 1;
Â  Â  Â  Â  Â  Â  Â  Â  return (
Â  Â  Â  Â  Â  Â  Â  Â  Â  <li key={acc.id} className="product-item">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <div className="product-info">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <strong>{acc.nombre}</strong>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <small>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Bs. {acc.precio.toFixed(2)} | Stock: {acc.cantidad} {acc.unidad}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </small>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <div className="product-actions">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <input
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  type="number"
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  min="1"
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  max={acc.cantidad}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  className="quantity-input"
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  value={currentQty}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  onChange={(e) => handleQuantityChange(acc.id, e.target.value)}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  />
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <button
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  onClick={() => handleSelect(acc)}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  className="add-product-btn"
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  disabled={currentQty > acc.cantidad || acc.cantidad === 0}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <FaPlus /> AÃ±adir
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </button>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  Â  Â  Â  </li>
Â  Â  Â  Â  Â  Â  Â  Â  );
Â  Â  Â  Â  Â  Â  Â  })
Â  Â  Â  Â  Â  Â  )}
Â  Â  Â  Â  Â  </ul>
Â  Â  Â  Â  )}
Â  Â  Â  </div>
Â  Â  </div>
Â  );
}

export default AccessorySelectionModal;