import React, { useState, useEffect, useMemo, useCallback } from 'react';
import ClientSelectionModal from '../assets/components/ClientSelectionModal';
import ProductSelectionModal from '../assets/components/ProductSelectionModal';
import PaymentModal from '../assets/components/PaymentModal';
import { db } from '../firebaseConfig';
import { collection, addDoc, doc, runTransaction, getDocs, serverTimestamp } from 'firebase/firestore'; 
import { registrarEventoAuditoria } from '../utils/auditoria';
import './VentaAccesorios.css';

const canchasData = [
Â  { id: 1, nombre: 'Cancha 1' },
Â  { id: 2, nombre: 'Cancha 2' },
Â  { id: 3, nombre: 'Cancha 3' },
Â  { id: 4, nombre: 'Cancha 4' },
];

const nombreUsuario = "Jassler";
const ventasCollectionRef = collection(db, 'ventas');
const productosCollectionRef = collection(db, 'productos');
const reportesTotalesCollectionRef = collection(db, 'reportesTotales'); 

// ðŸ”‘ CAMBIO CLAVE: Aceptar los estados y setters del componente padre para persistencia
function VentaAccesorios({ canchas, setCanchas, openVentas, setOpenVentas }) {

  // 1. InicializaciÃ³n de Canchas (Se ejecuta solo la primera vez que canchas estÃ¡ vacÃ­o)
  useEffect(() => {
    if (canchas.length === 0) {
      const initialCanchas = canchasData.map(c => ({
        ...c,
        productosEnVenta: [],
        clienteSeleccionado: null,
        tipo: 'cancha'
      }));
      // Solo inicializar si el array estÃ¡ realmente vacÃ­o
      setCanchas(initialCanchas); 
    }
  }, [canchas.length, setCanchas]);


Â  // Estados locales
Â  const [selectedItemId, setSelectedItemId] = useState(null);
Â  const [isCanchaSelected, setIsCanchaSelected] = useState(true);

Â  const [isClientModalOpen, setIsClientModalOpen] = useState(false);
Â  const [isProductModalOpen, setIsProductModalOpen] = useState(false);
Â  const [isPaymentModalOpen, setIsPaymentModalOpen] = useState(false);

Â  // Cargar productos (Sin cambios)
Â  const [products, setProducts] = useState([]);
Â  useEffect(() => {
Â  Â  const fetchProducts = async () => {
Â  Â  Â  try {
Â  Â  Â  Â  const snapshot = await getDocs(productosCollectionRef);
Â  Â  Â  Â  const all = snapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));
Â  Â  Â  Â  setProducts(all);
Â  Â  Â  } catch (err) {
Â  Â  Â  Â  console.error("Error al cargar productos:", err);
Â  Â  Â  }
Â  Â  };
Â  Â  fetchProducts();
Â  }, []);

Â  // MemorizaciÃ³n de item seleccionado (Sin cambios)
Â  const selectedItem = useMemo(() => {
Â  Â  if (selectedItemId == null) return null;
Â  Â  return isCanchaSelected
Â  Â  Â  ? canchas.find(c => c.id === selectedItemId)
Â  Â  Â  : openVentas.find(v => v.id === selectedItemId);
Â  }, [selectedItemId, isCanchaSelected, canchas, openVentas]);

Â  // CÃ¡lculo del total (Sin cambios)
Â  const totalAmount = useMemo(() => {
Â  Â  if (!selectedItem) return 0;
Â  Â  return (selectedItem.productosEnVenta || []).reduce((sum, p) => sum + (p.precio * (p.cantidad || 0)), 0);
Â  }, [selectedItem]);

Â  // Combinar ventas abiertas de canchas y ventas pendientes (Sin cambios)
Â  const allOpenVentas = useMemo(() => {
Â  Â  const fromCanchas = canchas.filter(c => c.productosEnVenta && c.productosEnVenta.length > 0);
Â  Â  return [...fromCanchas, ...openVentas];
Â  }, [canchas, openVentas]);

Â  // Manejo de selecciÃ³n (Sin cambios)
Â  const handleSelectItem = useCallback((id, isCancha) => {
Â  Â  setSelectedItemId(id);
Â  Â  setIsCanchaSelected(isCancha);
Â  }, []);

Â  // Crear venta pendiente desde cancha
Â  const handleSaveVentaPendiente = useCallback(() => {
Â  Â  if (!selectedItem) return;
Â  Â  if (!selectedItem.productosEnVenta || selectedItem.productosEnVenta.length === 0) {
Â  Â  Â  alert("No hay accesorios para guardar.");
Â  Â  Â  return;
Â  Â  }

Â  Â  if (isCanchaSelected) {
Â  Â  Â  const newId = openVentas.length > 0 ? Math.max(...openVentas.map(v => v.id)) + 1 : 1;
Â  Â  Â  const nuevaVentaPendiente = {
Â  Â  Â  Â  id: newId,
Â  Â  Â  Â  nombre: `Venta #${newId}`,
Â  Â  Â  Â  productosEnVenta: [...selectedItem.productosEnVenta],
Â  Â  Â  Â  clienteSeleccionado: selectedItem.clienteSeleccionado,
Â  Â  Â  Â  tipo: 'pendiente',
Â  Â  Â  };
Â  Â  Â  setOpenVentas(prev => [...prev, nuevaVentaPendiente]);
Â  Â  Â  // limpiar cancha
Â  Â  Â  setCanchas(prev => prev.map(c =>
Â  Â  Â  Â  c.id === selectedItemId
Â  Â  Â  Â  Â  ? { ...c, productosEnVenta: [], clienteSeleccionado: null }
Â  Â  Â  Â  Â  : c
Â  Â  Â  ));
Â  Â  Â  setSelectedItemId(null);
Â  Â  Â  alert("âœ… Venta guardada como pendiente.");
Â  Â  } else {
Â  Â  Â  alert("La venta ya estÃ¡ en pendientes.");
Â  Â  }
Â  }, [selectedItem, isCanchaSelected, openVentas, canchas, selectedItemId, setOpenVentas, setCanchas]);

Â  // Manejo cliente, producto (Sin cambios importantes, usan los setters de props)
Â  const openClientModal = useCallback(() => {
Â  Â  if (!selectedItem) {
Â  Â  Â  alert("Selecciona primero una cancha o venta pendiente.");
Â  Â  Â  return;
Â  Â  }
Â  Â  setIsClientModalOpen(true);
Â  }, [selectedItem]);

Â  const handleSelectClient = useCallback((client) => {
Â  Â  if (!selectedItem) return;
Â  Â  const updateIn = (items, setter) => {
Â  Â  Â  setter(items.map(item =>
Â  Â  Â  Â  item.id === selectedItemId
Â  Â  Â  Â  Â  ? { ...item, clienteSeleccionado: client }
Â  Â  Â  Â  Â  : item
Â  Â  Â  ));
Â  Â  };
Â  Â  if (isCanchaSelected) {
Â  Â  Â  updateIn(canchas, setCanchas);
Â  Â  } else {
Â  Â  Â  updateIn(openVentas, setOpenVentas);
Â  Â  }
Â  Â  setIsClientModalOpen(false);
Â  }, [selectedItemId, isCanchaSelected, canchas, openVentas, setCanchas, setOpenVentas]);

Â  const openProductModal = () => {
Â  Â  if (!selectedItem) {
Â  Â  Â  alert("Selecciona primero una cancha o venta pendiente.");
Â  Â  Â  return;
Â  Â  }
Â  Â  setIsProductModalOpen(true);
Â  };

Â  const handleSelectProduct = useCallback((newProd) => {
Â  Â  if (!selectedItem) return;
Â  Â  const updateIn = (items, setter) => {
Â  Â  Â  setter(items.map(item => {
Â  Â  Â  Â  if (item.id === selectedItemId) {
Â  Â  Â  Â  Â  const existing = (item.productosEnVenta || []).find(p => p.id === newProd.id);
Â  Â  Â  Â  Â  if (existing) {
Â  Â  Â  Â  Â  Â  return {
Â  Â  Â  Â  Â  Â  Â  ...item,
Â  Â  Â  Â  Â  Â  Â  productosEnVenta: item.productosEnVenta.map(p =>
Â  Â  Â  Â  Â  Â  Â  Â  p.id === newProd.id
Â  Â  Â  Â  Â  Â  Â  Â  Â  ? { ...p, cantidad: p.cantidad + newProd.cantidad }
Â  Â  Â  Â  Â  Â  Â  Â  Â  : p
Â  Â  Â  Â  Â  Â  Â  )
Â  Â  Â  Â  Â  Â  };
Â  Â  Â  Â  Â  } else {
Â  Â  Â  Â  Â  Â  return {
Â  Â  Â  Â  Â  Â  Â  ...item,
Â  Â  Â  Â  Â  Â  Â  productosEnVenta: [...(item.productosEnVenta || []), newProd]
Â  Â  Â  Â  Â  Â  };
Â  Â  Â  Â  Â  }
Â  Â  Â  Â  }
Â  Â  Â  Â  return item;
Â  Â  Â  }));
Â  Â  };
Â  Â  if (isCanchaSelected) {
Â  Â  Â  updateIn(canchas, setCanchas);
Â  Â  } else {
Â  Â  Â  updateIn(openVentas, setOpenVentas);
Â  Â  }
Â  Â  setIsProductModalOpen(false);
Â  }, [selectedItemId, isCanchaSelected, canchas, openVentas, setCanchas, setOpenVentas]);

Â  const updateProductQuantity = useCallback((prodId, delta) => {
Â  Â  if (!selectedItem) return;
Â  Â  const updateIn = (items, setter) => {
Â  Â  Â  setter(items.map(item => {
Â  Â  Â  Â  if (item.id === selectedItemId) {
Â  Â  Â  Â  Â  const newList = (item.productosEnVenta || []).map(p => {
Â  Â  Â  Â  Â  Â  if (p.id === prodId) {
Â  Â  Â  Â  Â  Â  Â  const newQty = (p.cantidad || 0) + delta;
Â  Â  Â  Â  Â  Â  Â  return newQty > 0 ? { ...p, cantidad: newQty } : null;
Â  Â  Â  Â  Â  Â  }
Â  Â  Â  Â  Â  Â  return p;
Â  Â  Â  Â  Â  }).filter(Boolean);
Â  Â  Â  Â  Â  return { ...item, productosEnVenta: newList };
Â  Â  Â  Â  }
Â  Â  Â  Â  return item;
Â  Â  Â  }));
Â  Â  };
Â  Â  if (isCanchaSelected) {
Â  Â  Â  updateIn(canchas, setCanchas);
Â  Â  } else {
Â  Â  Â  updateIn(openVentas, setOpenVentas);
Â  Â  }
Â  }, [selectedItemId, isCanchaSelected, canchas, openVentas, setCanchas, setOpenVentas]);

Â  const openPaymentModal = () => {
Â  Â  if (!selectedItem || !(selectedItem.productosEnVenta && selectedItem.productosEnVenta.length > 0)) {
Â  Â  Â  alert("Debe haber al menos un accesorio para pagar.");
Â  Â  Â  return;
Â  Â  }
Â  Â  setIsPaymentModalOpen(true);
Â  };

Â  // Procesar pago (con correcciÃ³n de mÃ©todo de pago)
Â  const handleProcessPayment = useCallback(async (paymentData) => {
Â  Â  if (!selectedItem) return;
Â  Â  const ventaTotal = (selectedItem.productosEnVenta || []).reduce((sum, p) => sum + (p.precio * p.cantidad), 0);

    // âœ… CORRECCIÃ“N: Asegurar que metodoPago tenga un valor
    const metodoPagoFinal = paymentData.method || 'Desconocido';

Â  Â  const nuevaVenta = {
Â  Â  Â  tipoVenta: 'Accesorio', 
Â  Â  Â  ubicacion: selectedItem.nombre,
Â  Â  Â  productos: (selectedItem.productosEnVenta || []).map(p => ({
Â  Â  Â  Â  id: p.id,
Â  Â  Â  Â  nombre: p.nombre,
Â  Â  Â  Â  cantidad: p.cantidad,
Â  Â  Â  Â  precio: p.precio
Â  Â  Â  })),
Â  Â  Â  clienteId: selectedItem.clienteSeleccionado?.id || null,
Â  Â  Â  clienteNombre: selectedItem.clienteSeleccionado?.nombreCompleto || 'AnÃ³nimo',
Â  Â  Â  total: ventaTotal,
Â  Â  Â  metodoPago: metodoPagoFinal, // Usar el valor asegurado
Â  Â  Â  fecha: new Date().toISOString().slice(0,10),
Â  Â  Â  fechaHora: serverTimestamp(), 
Â  Â  Â  usuario: nombreUsuario
Â  Â  };

Â  Â  try {
Â  Â  Â  await registrarEventoAuditoria({
Â  Â  Â  Â  usuario: nombreUsuario,
Â  Â  Â  Â  tipo: 'VentaAccesorio',
Â  Â  Â  Â  detalles: `Venta de accesorios a ${selectedItem.clienteSeleccionado?.nombreCompleto || 'AnÃ³nimo'} por Bs. ${ventaTotal.toFixed(2)} - Origen: ${selectedItem.nombre}`
Â  Â  Â  });

Â  Â  Â  // ajustar inventario
Â  Â  Â  for (const p of selectedItem.productosEnVenta) {
Â  Â  Â  Â  const productRef = doc(db, 'inventario', p.id);
Â  Â  Â  Â  await runTransaction(db, async tx => {
Â  Â  Â  Â  Â  const snap = await tx.get(productRef);
Â  Â  Â  Â  Â  if (!snap.exists()) throw new Error(`Producto ${p.nombre} no existe.`);
Â  Â  Â  Â  Â  const stock = snap.data().cantidad;
Â  Â  Â  Â  Â  if (stock < p.cantidad) {
Â  Â  Â  Â  Â  Â  throw new Error(`Stock insuficiente para ${p.nombre}. Disponible: ${stock}`);
Â  Â  Â  Â  Â  }
Â  Â  Â  Â  Â  tx.update(productRef, { cantidad: stock - p.cantidad });
Â  Â  Â  Â  });
Â  Â  Â  }

Â  Â  Â  // 1. Guardar en la colecciÃ³n 'ventas'
Â  Â  Â  await addDoc(ventasCollectionRef, nuevaVenta);

Â  Â  Â  // 2. Guardar en la colecciÃ³n 'reportesTotales'
Â  Â  Â  const reporteRegistro = {
Â  Â  Â  Â  Â  ...nuevaVenta,
Â  Â  Â  Â  Â  tipoRegistro: 'VENTA_ACCESORIO',
Â  Â  Â  Â  Â  esVenta: true,
Â  Â  Â  Â  Â  esAlquiler: false,
Â  Â  Â  Â  Â  esAccesorio: true,
Â  Â  Â  };
Â  Â  Â  await addDoc(reportesTotalesCollectionRef, reporteRegistro);


Â  Â  Â  if (selectedItem.clienteSeleccionado?.id) {
Â  Â  Â  Â  const clientRef = doc(db, 'clientes', selectedItem.clienteSeleccionado.id);
Â  Â  Â  Â  await runTransaction(db, async tx => {
Â  Â  Â  Â  Â  const clientSnap = await tx.get(clientRef);
Â  Â  Â  Â  Â  if (clientSnap.exists()) {
Â  Â  Â  Â  Â  Â  const curr = clientSnap.data().totalCompras || 0;
Â  Â  Â  Â  Â  Â  tx.update(clientRef, { totalCompras: curr + ventaTotal });
Â  Â  Â  Â  Â  }
Â  Â  Â  Â  });
Â  Â  Â  }

Â  Â  Â  alert("âœ… Venta procesada y cerrada.");

Â  Â  Â  // limpiar el item (usan los setters de props)
Â  Â  Â  if (isCanchaSelected) {
Â  Â  Â  Â  setCanchas(prev => prev.map(c =>
Â  Â  Â  Â  Â  c.id === selectedItemId
Â  Â  Â  Â  Â  Â  ? { ...c, productosEnVenta: [], clienteSeleccionado: null }
Â  Â  Â  Â  Â  Â  : c
Â  Â  Â  Â  ));
Â  Â  Â  } else {
Â  Â  Â  Â  setOpenVentas(prev => prev.filter(v => v.id !== selectedItemId));
Â  Â  Â  }

Â  Â  Â  setSelectedItemId(null);
Â  Â  Â  setIsPaymentModalOpen(false);

Â  Â  } catch (err) {
Â  Â  Â  console.error("Error procesando venta:", err);
Â  Â  Â  alert(err.message || "Error al procesar la venta.");
Â  Â  }
Â  }, [selectedItem, isCanchaSelected, selectedItemId, canchas, openVentas, setCanchas, setOpenVentas]);


Â  // UI (Sin cambios)
Â  return (
Â  Â  <div className="ventas-container">
Â  Â  Â  <h1 className="main-title">Venta de Accesorios</h1>

Â  Â  Â  <div className="main-content-panels">
Â  Â  Â  Â  <div className="side-panel">
Â  Â  Â  Â  Â  <h3 className="section-title">Seleccionar Cancha</h3>
Â  Â  Â  Â  Â  <div className="button-list">
Â  Â  Â  Â  Â  Â  {canchas.map(c => (
Â  Â  Â  Â  Â  Â  Â  <button
Â  Â  Â  Â  Â  Â  Â  Â  key={c.id}
Â  Â  Â  Â  Â  Â  Â  Â  className={`comanda-btn ${isCanchaSelected && selectedItemId === c.id ? 'active' : ''}`}
Â  Â  Â  Â  Â  Â  Â  Â  onClick={() => handleSelectItem(c.id, true)}
Â  Â  Â  Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Â  Â  Â  {c.nombre}
Â  Â  Â  Â  Â  Â  Â  </button>
Â  Â  Â  Â  Â  Â  ))}
Â  Â  Â  Â  Â  Â  <h3 className="section-title">Ventas Pendientes</h3>
Â  Â  Â  Â  Â  Â  <div className="button-list open-orders-list">
Â  Â  Â  Â  Â  Â  Â  {openVentas.length > 0 ? openVentas.map(v => (
Â  Â  Â  Â  Â  Â  Â  Â  <button
Â  Â  Â  Â  Â  Â  Â  Â  Â  key={v.id}
Â  Â  Â  Â  Â  Â  Â  Â  Â  className={`comanda-btn ${!isCanchaSelected && selectedItemId === v.id ? 'active' : ''}`}
Â  Â  Â  Â  Â  Â  Â  Â  Â  onClick={() => handleSelectItem(v.id, false)}
Â  Â  Â  Â  Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Â  Â  Â  Â  {v.nombre}
Â  Â  Â  Â  Â  Â  Â  Â  </button>
Â  Â  Â  Â  Â  Â  Â  )) : (
Â  Â  Â  Â  Â  Â  Â  Â  <p className="no-open-orders-msg">No hay ventas pendientes</p>
Â  Â  Â  Â  Â  Â  Â  )}
Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  </div>

Â  Â  Â  Â  <div className="details-panel">
Â  Â  Â  Â  Â  {selectedItem ? (
Â  Â  Â  Â  Â  Â  <div className="venta-details-container">
Â  Â  Â  Â  Â  Â  Â  <h3 className="details-title">
Â  Â  Â  Â  Â  Â  Â  Â  {selectedItem.nombre}
Â  Â  Â  Â  Â  Â  Â  </h3>

Â  Â  Â  Â  Â  Â  Â  <div className="details-section">
Â  Â  Â  Â  Â  Â  Â  Â  <button onClick={openClientModal} className="add-client-btn">
Â  Â  Â  Â  Â  Â  Â  Â  Â  {selectedItem.clienteSeleccionado ? 'Cambiar Cliente' : 'Agregar Cliente'}
Â  Â  Â  Â  Â  Â  Â  Â  </button>
Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  Â  {selectedItem.clienteSeleccionado && (
Â  Â  Â  Â  Â  Â  Â  Â  <div className="client-info">
Â  Â  Â  Â  Â  Â  Â  Â  Â  <p><strong>Cliente:</strong> {selectedItem.clienteSeleccionado.nombreCompleto}</p>
Â  Â  Â  Â  Â  Â  Â  Â  Â  <p><strong>CI:</strong> {selectedItem.clienteSeleccionado.numeroCi}</p>
Â  Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  Â  )}

Â  Â  Â  Â  Â  Â  Â  <div className="details-section product-section">
Â  Â  Â  Â  Â  Â  Â  Â  <button onClick={openProductModal} className="add-product-btn">AÃ±adir Accesorio</button>
Â  Â  Â  Â  Â  Â  Â  Â  <h4 className="products-list-title">Accesorios en la venta</h4>
Â  Â  Â  Â  Â  Â  Â  Â  {selectedItem.productosEnVenta && selectedItem.productosEnVenta.length > 0 ? (
Â  Â  Â  Â  Â  Â  Â  Â  Â  <ul className="products-list">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  {selectedItem.productosEnVenta.map(p => (
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <li key={p.id} className="product-item">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <div className="product-info">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <span className="product-name">{p.nombre}</span>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <span className="product-price-display">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Bs. {(p.precio * p.cantidad).toFixed(2)} <small>(Bs. {p.precio.toFixed(2)} c/u)</small>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </span>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <div className="quantity-controls">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <button className="quantity-btn" onClick={() => updateProductQuantity(p.id, -1)} aria-label="Reducir cantidad">âˆ’</button>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <span className="product-quantity">{p.cantidad}</span>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <button className="quantity-btn" onClick={() => updateProductQuantity(p.id, 1)} aria-label="Aumentar cantidad">+</button>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </li>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  ))}
Â  Â  Â  Â  Â  Â  Â  Â  Â  </ul>
Â  Â  Â  Â  Â  Â  Â  Â  ) : (
Â  Â  Â  Â  Â  Â  Â  Â  Â  <p className="empty-products-msg">No hay accesorios aÃºn.</p>
Â  Â  Â  Â  Â  Â  Â  Â  )}
Â  Â  Â  Â  Â  Â  Â  Â  <div className="total-amount-container">
Â  Â  Â  Â  Â  Â  Â  Â  Â  <p className="total-amount-text">Total: Bs. {totalAmount.toFixed(2)}</p>
Â  Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  Â  Â  {selectedItem.productosEnVenta && selectedItem.productosEnVenta.length > 0 && (
Â  Â  Â  Â  Â  Â  Â  Â  Â  <>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <button onClick={handleSaveVentaPendiente} className="save-btn">Guardar Venta Pendiente</button>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <button onClick={openPaymentModal} className="pay-btn">Pagar Venta</button>
Â  Â  Â  Â  Â  Â  Â  Â  Â  </>
Â  Â  Â  Â  Â  Â  Â  Â  )}
Â  Â  Â  Â  Â  Â  Â  </div>

Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  ) : (
Â  Â  Â  Â  Â  Â  <p className="no-selection-message">Selecciona una cancha o venta pendiente para ver detalles.</p>
Â  Â  Â  Â  Â  )}
Â  Â  Â  Â  </div>
Â  Â  Â  </div>

Â  Â  Â  <div className="open-orders-display-panel">
Â  Â  Â  Â  <h3 className="section-title">Ventas con Accesorios Pendientes</h3>
Â  Â  Â  Â  <div className="open-orders-list-cards">
Â  Â  Â  Â  Â  {allOpenVentas.length > 0 ? allOpenVentas.map(item => (
Â  Â  Â  Â  Â  Â  <div 
                key={`venta-${item.tipo}-${item.id}`} 
                className={`order-card ${selectedItemId === item.id ? 'active-card' : ''}`}
                onClick={() => handleSelectItem(item.id, item.tipo === 'cancha')} // AÃ±adir onClick a la tarjeta
            >
Â  Â  Â  Â  Â  Â  Â  <div className="card-header"><h4>{item.nombre}</h4></div>
Â  Â  Â  Â  Â  Â  Â  <div className="card-body">
Â  Â  Â  Â  Â  Â  Â  Â  {item.clienteSeleccionado && <p>Cliente: {item.clienteSeleccionado.nombreCompleto}</p>}
Â  Â  Â  Â  Â  Â  Â  Â  {item.productosEnVenta.slice(0,3).map(p => <p key={p.id}>{p.nombre} x {p.cantidad}</p>)}
Â  Â  Â  Â  Â  Â  Â  Â  {item.productosEnVenta.length > 3 && <p>+ {item.productosEnVenta.length - 3} mÃ¡s</p>}
Â  Â  Â  Â  Â  Â  Â  Â  <div className="total-card"><strong>Total: Bs. {item.productosEnVenta.reduce((s, p) => s + (p.precio * p.cantidad), 0).toFixed(2)}</strong></div>
Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  Â  <div className="card-actions">
                {/* Ahora el botÃ³n de Editar/Seleccionar es redundante pero lo mantengo por si quieres la acciÃ³n */}
Â  Â  Â  Â  Â  Â  Â  Â  <button className="btn-edit" onClick={(e) => { e.stopPropagation(); handleSelectItem(item.id, item.tipo === 'cancha'); }}>Editar</button>
Â  Â  Â  Â  Â  Â  Â  Â  <button className="btn-pay" onClick={(e) => { e.stopPropagation(); openPaymentModal(); }}>Pagar</button>
Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  )) : (
Â  Â  Â  Â  Â  Â  <p className="no-open-orders-msg">No hay ventas pendientes.</p>
Â  Â  Â  Â  Â  )}
Â  Â  Â  Â  </div>
Â  Â  Â  </div>

Â  Â  Â  {isClientModalOpen && (
Â  Â  Â  Â  <ClientSelectionModal onSelectClient={handleSelectClient} onClose={() => setIsClientModalOpen(false)} />
Â  Â  Â  )}
Â  Â  Â  {isProductModalOpen && (
Â  Â  Â  Â  <ProductSelectionModal products={products} filtroDeSeccion="ACCESORIOS" onSelectProduct={handleSelectProduct} onClose={() => setIsProductModalOpen(false)} />
Â  Â  Â  )}
Â  Â  Â  {isPaymentModalOpen && selectedItem && (
Â  Â  Â  Â  <PaymentModal totalAmount={totalAmount} products={selectedItem.productosEnVenta} onProcessPayment={handleProcessPayment} onClose={() => setIsPaymentModalOpen(false)} />
Â  Â  Â  )}
Â  Â  </div>
Â  );
}

export default VentaAccesorios;